import asyncio

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
import aiohttp
from aiogram_dialog import StartMode, DialogManager

from bot import bot
from bot.dialogs.v2.states import Wiki
# from bot.dialogs.states import Wiki, Creation
from core import logger
from schemas.user import TelegramUser

router = Router()

@router.message(Command(commands=["start"]))
async def start_command(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    if message.from_user is None:
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Pydantic —Å—Ö–µ–º–∏
    user_data = TelegramUser(
        id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language_code=message.from_user.language_code,
        is_premium=message.from_user.is_premium or False,
        is_bot=message.from_user.is_bot
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ POST-–∑–∞–ø–∏—Ç –¥–æ FastAPI –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "http://localhost:8000/add_user",
                json=user_data.dict()
            ) as response:
                if response.status != 200:
                    logger.error(f"Failed to add user: {await response.text()}")
                    await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
                    return

                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API
                response_data = await response.json()
                is_new_user = response_data["is_new_user"]

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
                if is_new_user:
                    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –¢–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É –±–∞–∑—ñ. üöÄ")
                else:
                    await message.answer(f"–†–∞–¥—ñ –∑–Ω–æ–≤—É —Ç–µ–±–µ –±–∞—á–∏—Ç–∏, {message.from_user.first_name}! üéâ")
        except Exception as e:
            logger.error(f"Error while adding user: {e}")
            await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")


@router.message(Command(commands=["menu"]))
async def menu_command(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(Wiki.main, mode=StartMode.RESET_STACK)
    # await dialog_manager.start(Creation.create_name)

@router.message(Command("clear"))
async def clear_chat(message: Message, bot: Bot):
    chat_id = message.chat.id
    from_id = message.message_id
    chat_type = message.chat.type

    deleted = 0
    limit = 100

    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    notice = await message.answer("üßπ –û—á–∏—â–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

    for msg_id in range(from_id, from_id - limit, -1):
        try:
            msg = await bot.forward_message(chat_id=chat_id, from_chat_id=chat_id, message_id=msg_id)
            await bot.delete_message(chat_id, msg.message_id)  # –£–¥–∞–ª—è–µ–º –∫–æ–ø–∏—é (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å)
            await bot.delete_message(chat_id, msg_id)          # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
            deleted += 1
            await asyncio.sleep(0.05)
        except Exception:
            # –í –ª–∏—á–∫–µ Telegram –Ω–µ –¥–∞—Å—Ç —É–¥–∞–ª–∏—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏ —Å—Ç–∞—Ä—ã–µ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞)
            if chat_type == "private":
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç –±–æ—Ç–∞
                    original = await bot.get_chat_member(chat_id, bot.id)
                    msg = await bot.get_chat_message(chat_id, msg_id)
                    if msg.from_user.id == bot.id:
                        await bot.delete_message(chat_id, msg_id)
                        deleted += 1
                except:
                    pass
            continue

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await bot.delete_message(chat_id, message.message_id)
        await bot.delete_message(chat_id, notice.message_id)
    except:
        pass

    # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π.")